#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ GitHub
–¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyGithub: pip install PyGithub
"""

import os
import subprocess
import sys
from getpass import getpass

def install_github_package():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç PyGithub –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"""
    try:
        import github
        print("‚úÖ PyGithub —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é PyGithub...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "PyGithub"])
            print("‚úÖ PyGithub —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PyGithub")
            return False

def create_github_repo():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–¥"""
    try:
        from github import Github
    except ImportError:
        print("‚ùå PyGithub –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π: pip install PyGithub")
        return False
    
    print("\nüöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞
    token = getpass("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à GitHub Personal Access Token: ")
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: flask-user-registration): ").strip()
    if not repo_name:
        repo_name = "flask-user-registration"
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    description = input("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: Flask web app with user registration): ").strip()
    if not description:
        description = "Flask web app with user registration and SQLite database"
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ GitHub
        g = Github(token)
        user = g.get_user()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub –∫–∞–∫: {user.login}")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        print(f"üìù –°–æ–∑–¥–∞—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π '{repo_name}'...")
        repo = user.create_repo(
            repo_name,
            description=description,
            private=False,
            auto_init=False
        )
        print(f"‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω: {repo.html_url}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º remote origin
        print("üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é Git remote...")
        subprocess.run(["git", "remote", "remove", "origin"], capture_output=True)
        subprocess.run(["git", "remote", "add", "origin", repo.clone_url], check=True)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤–µ—Ç–∫—É –≤ main
        print("üåø –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—é –≤–µ—Ç–∫—É –≤ main...")
        subprocess.run(["git", "branch", "-M", "main"], check=True)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–¥
        print("üì§ –ó–∞–≥—Ä—É–∂–∞—é –∫–æ–¥ –Ω–∞ GitHub...")
        subprocess.run(["git", "push", "-u", "origin", "main"], check=True)
        
        print("\nüéâ –£–°–ü–ï–•!")
        print("=" * 50)
        print(f"üìã –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo.html_url}")
        print(f"üîó –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {repo.clone_url}")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Railway.app")
        print("2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("3. Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–≤–µ—Ä–Ω–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        print(f"4. –í–∞—à —Å–∞–π—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—É–±–ª–∏—á–Ω–æ–º—É URL")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåü –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    if not os.path.exists(".git"):
        print("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: git init")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–∏—Ç–æ–≤
    try:
        result = subprocess.run(["git", "log", "--oneline", "-1"], 
                              capture_output=True, text=True)
        if not result.stdout.strip():
            print("‚ùå –ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: git add . && git commit -m 'Initial commit'")
            return
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Git")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyGithub
    if not install_github_package():
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if create_github_repo():
        print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –í–∞—à –ø—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub.")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ GitHub.")

if __name__ == "__main__":
    main()
